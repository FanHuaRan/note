ChannelHandler家族
	Channel的生命周期
		状 态 				描 述
		ChannelUnregistered Channel已经被创建，但还未注册到EventLoop
		ChannelRegistered   Channel已经被注册到了EventLoop
		ChannelActive 	Channel处于活动状态（已经连接到它的远程节点,现在可以接收和发送数据了
		ChannelInactive 	Channel没有连接到远程节点
		生命周期变化如图所示

	ChannelHandler的生命周期
		ChannelHandler的生命周期方法：
		handlerAdded 当把ChannelHandler添加到ChannelPipeline中时被调用
		handlerRemoved 当从ChannelPipeline中移除ChannelHandler时被调用
		exceptionCaught 当处理过程中在ChannelPipeline中有错误产生时被调用
		Netty定义了下面两个重要的ChannelHandler 子接口：
	ChannelInboundHandler——处理入站数据以及各种状态变化；
	ChannelOutboundHandler——处理出站数据并且允许拦截所有的操作。
	ChannelInboundHandler接口
		ChannelInboundHandler的方法：
		channelRegistered 当Channel已经注册到它的EventLoop 并且能够处理I/O时被调用
		channelUnregistered 当Channel从它的EventLoop注销并且无法处理任何I/O时被调用
		channelActive 当Channel处于活动状态时被调用；Channel已经连接/绑定并且已经就绪
		channelInactive 当Channel离开活动状态并且不再连接它的远程节点时被调用
		channelReadComplete 当Channel上的一个读操作完成时被调用①
		channelRead 当从Channel读取数据时被调用
		ChannelWritabilityChanged 当Channel的可写状态发生改变时被调用。用户可以确保写操作不会完成得太快（以避免发生OutOfMemoryError）或者可以在Channel变为再次可写时恢复写入。可以通过调用Channel的isWritable()方法来检测Channel的可写性。与可写性相关的阈值可以通过Channel.config().setWriteHighWaterMark()和Channel.config().setWriteLowWaterMark()方法来设置
		userEventTriggered 当ChannelnboundHandler.fireUserEventTriggered()方法被调
		用时被调用，因为一个POJO 被传经了ChannelPipeline
		注意：SimpleChannelInboundHandler子类实现了对资源的自动释放
	ChannelOutboundHandler接口
		出站操作和数据将由ChannelOutboundHandler处理。它的方法将被Channel、ChannelPipeline以及ChannelHandlerContext调用。
		ChannelOutboundHandler的方法：
		bind(ChannelHandlerContext,SocketAddress,ChannelPromise)当请求将Channel绑定到本地地址时被调用
		connect(ChannelHandlerContext,SocketAddress,SocketAddress,ChannelPromise)当请求将Channel连接到远程节点时被调用
		disconnect(ChannelHandlerContext,ChannelPromise)
		当请求将Channel从远程节点断开时被调用
		close(ChannelHandlerContext,ChannelPromise)
		 当请求关闭Channel时被调用
		deregister(ChannelHandlerContext,ChannelPromise)当请求将Channel从它的EventLoop注销时被调用
		read(ChannelHandlerContext) 
		当请求从Channel读取更多的数据时被调用
		flush(ChannelHandlerContext) 当请求通过Channel 
		将入队数据冲刷到远程节点时被调用
		write(ChannelHandlerContext,Object,ChannelPromise) 当请求通过Channel将数据写到远程节点时被调用
		注意：ChannelOutboundHandler中的大部分方法都需要一个ChannelPromise参数，以便在操作完成时得到通知。ChannelPromise是ChannelFuture的一个子类，其定义了一些可写的方法，如setSuccess()和setFailure()，从而使ChannelFuture不可变
	ChannelHandler适配器
		可以使用ChannelInboundHandlerAdapter和ChannelOutboundHandlerAdapter类作为自己的ChannelHandler 的起始点。这两个适配器分别提供了ChannelInboundHandler和ChannelOutboundHandler 的基本实现。通过扩展抽象类ChannelHandlerAdapter，它们获得了它们共同的超接口ChannelHandler 的方法。类的层次结构如图所示：

		ChannelHandlerAdapter提供了实用方法isSharable()。如果其对应的实现被标注为Sharable，那么这个方法将返回true，表示它可以被添加到多个ChannelPipeline中）。在ChannelInboundHandlerAdapter和ChannelOutboundHandlerAdapter中所提供的方法体调用了其相关联的ChannelHandlerContext上的等效方法，从而将事件转发到了ChannelPipeline中的下一个ChannelHandler中。你要想在自己的ChannelHandler中使用这些适配器类，只需要简单地扩展它们
	资源管理
		每当通过调用ChannelInboundHandler.channelRead()或者ChannelOutboundHandler.write()方法来处理数据时，需要确保没有任何的资源泄露
		Netty提供了ResourceLeakDetector它将对你应用程序的缓冲区分配做大约1%的采样来检测内存泄漏
		如何释放资源，如图所示：

		如果一个消息被消费或者丢弃了，并且没有传递给ChannelPipeline中的下一个ChannelOutboundHandler，那么用户就有责任调用ReferenceCountUtil.release如果消息到达了实际的传输层，那么当它被写入时或者Channel关闭时，都将被自动释放
ChannelPipeline接口
		每一个新创建的Channel都将会被分配一个新的ChannelPipeline。这项关联是永久性的；Channel 既不能附加另外一个ChannelPipeline，也不能分离其当前的。在Netty组件的生命周期中，这是一项固定的操作，不需要开发人员的任何干预
		根据事件的起源，事件将会被ChannelInboundHandler或者ChannelOutboundHandler处理。随后，通过调用ChannelHandlerContext 实现，它将被转发给同一超类型的下一个ChannelHandler。注意：ChannelHandlerContext使得ChannelHandler能够和它的ChannelPipeline以及其他的ChannelHandler交互。典型的入站和出站布局如下：

		ChannelPipeline相对论
		你可能会说，从事件途经ChannelPipeline 的角度来看，ChannelPipeline 的头部和尾端取
		决于该事件是入站的还是出站的。然而Netty 总是将ChannelPipeline 的入站口（图6-3 中的左侧）作为头部，而将出站口（该图的右侧）作为尾端当你完成了通过调用ChannelPipeline.add*()方法将入站处理器（ChannelInboundHandler）和出站处理器（ ChannelOutboundHandler ）混合添加到ChannelPipeline 之后，每一个ChannelHandler从头部到尾端的顺序位置正如同我们方才所定义它们的一样。因此，如果图中的处理器（ChannelHandler）从左到右进行编号，那么第一个被入站事件看到的ChannelHandler 将是1，而第一个被出站事件看到的ChannelHandler 将是5。
		修改ChannelPipeline
		ChannelHandler可以通过添加、删除或者替换其他的ChannelHandler来实时地修改ChannelPipeline的布局。（它也可以将它自己从ChannelPipeline中移除。）这是ChannelHandler最重要的能力之一
		ChannelHandler的用于修改ChannelPipeline的方法：
		AddFirstaddBefore addAfteraddLast 将一个ChannelHandler添加到ChannelPipeline 中
		remove 将一个ChannelHandler 从ChannelPipeline中移除
		replace 将ChannelPipeline 中的一个ChannelHandler替换为另一个ChannelHandler
		如下是使用代码：

		触发事件
		ChannelPipeline 的API 公开了用于调用入站和出站操作的附加方法，
			入站操作事件

			出站操作事件

		总结
		ChannelPipeline 保存了与Channel 相关联的ChannelHandler；
		ChannelPipeline 可以根据需要，通过添加或者删除ChannelHandler 来动态地修改；
		ChannelPipeline 有着丰富的API 用以被调用，以响应入站和出站事件
ChannelHandlerContext接口
		ChannelHandlerContext 代表了ChannelHandler 和ChannelPipeline 之间的关
		联，每当有ChannelHandler 添加到ChannelPipeline 中时，都会创建ChannelHandler-
		Context。ChannelHandlerContext 的主要功能是管理它所关联的ChannelHandler 和在
		同一个ChannelPipeline 中的其他ChannelHandler 之间的交互。
		ChannelHandlerContext 有很多的方法，其中一些方法也存在于Channel 和Channel-
		Pipeline 本身上，但是有一点重要的不同。如果调用Channel 或者ChannelPipeline 上的这
		些方法，它们将沿着整个ChannelPipeline 进行传播。而调用位于ChannelHandlerContext
		上的相同方法，则将从当前所关联的ChannelHandler 开始，并且只会传播给位于该
		ChannelPipeline 中的下一个能够处理该事件的ChannelHandler。
		注意：ChannelHandlerContext 和ChannelHandler 之间的关联（绑定）是永远不会改
变的，所以缓存对它的引用是安全的；如同我们在本节开头所解释的一样，相对于其他类的同名方法，ChannelHandlerContext的方法将产生更短的事件流，应该尽可能地利用这个特性来获得最大的性能。
		使用ChannelHandlerContext
		Channel、ChannelPipeline、ChannelHandler以及ChannelHandlerContext之间的关系如图所示：

		事件从一个ChannelHandler到下一个ChannelHandler 的移动是由ChannelHandlerContext 上的调用完成的，如图：

		事件流如图：

		ChannelHandler和ChannelHandlerContext的高级用法
		11-12
		为何要共享同一个ChannelHandler？可以在多个ChannelPipeline中安装同一个ChannelHandler
的一个常见的原因是用于收集跨越多个Channel 的统计信息。

异常处理
		处理入站异常
		ChannelHandler.exceptionCaught()的默认实现是简单地将当前异常转发给ChannelPipeline中的下一个ChannelHandler；如果异常到达了ChannelPipeline的尾端，它将会被记录为未被处理；要想定义自定义的处理逻辑，你需要重写exceptionCaught方法。然后你需要决定是否需要将该异常传播出去
		处理出站异常
			用于处理出站操作中的正常完成以及异常的选项，都基于以下的通知机制。每个出站操作都将返回一个ChannelFuture。注册到ChannelFuture 的Channel-FutureListener将在操作完成时被通知该操作是成功了还是出错了。几乎所有的ChannelOutboundHandler 上的方法都会传入一个ChannelPromise的实例。作为ChannelFuture 的子类，ChannelPromise 也可以被分配用于异步通知的监听器。但是，ChannelPromise 还具有提供立即通知的可写方法：
			ChannelPromise setSuccess();
			ChannelPromise setFailure(Throwable cause);
			添加ChannelFutureListener 只需要调用ChannelFuture 实例上的addListener
			(ChannelFutureListener)方法，并且有两种不同的方式可以做到这一点。其中最常用的方式是，
			调用出站操作（如write()方法）所返回的ChannelFuture 上的addListener()方法。
			两种处理方式：


			