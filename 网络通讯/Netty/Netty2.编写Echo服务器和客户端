二.Netty客户端服务器概览


三.服务器
所有的Netty服务器都需要以下两部分。
至少一个ChannelHandler—该组件实现了服务器对从客户端接收的数据的处理，即它的业务逻辑。
引导—这是配置服务器的启动代码。至少，它会将服务器绑定到它要监听连接请求的端口上。
其实引导这部分代码都比较通用，我们的逻辑主要是在ChannelHandler上面
1.ChannelHandler和业务逻辑
/*
 * 入站适配器
 */
@Sharable//标示一个ChannelHandler可以被多个Channel 安全地共享
public class EchoServerHandler extends ChannelInboundHandlerAdapter{

	//读取发生时触发
	@Override
	public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
		ByteBuf in=(ByteBuf)msg;
		System.out.println("Server received: "+in.toString());
		ctx.write(in);//将接收到的消息写给发送者，而不冲刷出站消息
	}
	//读取完成时触发
	@Override
	public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
		//将未决消息冲刷到远程节点，并且关闭该Channel
		ctx.writeAndFlush(Unpooled.EMPTY_BUFFER)
			 .addListener(ChannelFutureListener.CLOSE);
			 
	}
	//发生异常时触发
	@Override
	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
		cause.printStackTrace();
		//关闭该Channel
		ctx.close();
	}
}
注意：重写exceptionCaught()方法允许你对Throwable的任何子类型做出反应，在这里你记录了异常并关闭了连接。虽然一个更加完善的应用程序也许会尝试从异常中恢复，但在这个场景下，只是通过简单地关闭连接来通知远程节点发生了错误。
那如果不捕获异常，会发生什么呢
每个Channel 都拥有一个与之相关联的ChannelPipeline，其持有一个ChannelHandler的实例链。在默认的情况下，ChannelHandler 会把对它的方法的调用转发给链中的下一个ChannelHandler。因此，如果exceptionCaught()方法没有被该链中的某处实现，那么所接收的异常将会被传递到ChannelPipeline的尾端并被记录。为此，你的应用程序应该提供至少有一个实现了exceptionCaught()方法的ChannelHandler。
2.引导服务器
/*
 * echo服务器实现 使用引导服务器
 */
public class EchoServer {
	private  final int port;
	
	public EchoServer(int port){
		this.port=port;
	}

	public static void main(String[]args) throws InterruptedException{
		if(args.length!=1){
			System.err.println("usage："+EchoServer.class.getSimpleName()+"《》");
		}
		int port=Integer.parseInt(args[0]);
		new EchoServer(port).start();;
	}
	
	public void start() throws InterruptedException{
		final EchoServerHandler serverHandler=new EchoServerHandler();
		//创建Event-LoopGroup
		EventLoopGroup group=new NioEventLoopGroup();
		try {
			//创建Server-Bootstrap
			ServerBootstrap bootstrap=new ServerBootstrap();
			bootstrap.group(group)//指定group
							  .channel(NioServerSocketChannel.class)//指定所使用的NIO传输Channel
							  .localAddress(new InetSocketAddress(port))//使用指定的端口设置套接字地址
							  .childHandler(new ChannelInitializer<SocketChannel>() {//channel初始化委托器
								@Override
								protected void initChannel(SocketChannel ch) throws Exception {
									//添加一个EchoServer-Handler 到子Channel的ChannelPipeline
									//EchoServerHandler 被	标注为@Shareable，所以我们可以总是使用同样的实例
									ch.pipeline().addLast(serverHandler);
								}
							});
			//异步地绑定服务器；调用sync()方法阻塞等待直到绑定完成
			ChannelFuture future=bootstrap.bind().sync();
			//获取Channel 的CloseFuture，并且阻塞当前线程直到它完成
			future.channel().closeFuture().sync();
		} finally {
			//关闭EventLoopGroup，释放所有的资源
			group.shutdownGracefully().sync();
		}
	}
}
引导服务器具体负责以下内容：
绑定到服务器将在其上监听并接受传入连接请求的端口；
配置Channel，以将有关的入站消息通知给EchoServerHandler 实例。


服务器的主要代码组件：
EchoServerHandler 实现了业务逻辑；
main()方法引导了服务器；
    引导过程中所需要的步骤如下：
	创建一个ServerBootstrap 的实例以引导和绑定服务器；
	创建并分配一个NioEventLoopGroup 实例以进行事件的处理，如接受新连接以及读/写数据；
	指定服务器绑定的本地的InetSocketAddress；
	使用一个EchoServerHandler 的实例初始化每一个新的Channel；
	调用ServerBootstrap.bind()方法以绑定服务器。

四.客户端
Echo 客户端将会：
（1）连接到服务器；
（2）发送一个或者多个消息；
（3）对于每个消息，等待并接收从服务器发回的相同的消息；
（4）关闭连接。
1.通过ChannelHandler实现客户端逻辑
/*
 * echo客户端处理器
 */
@Sharable
public class EchoClientHandler extends SimpleChannelInboundHandler<ByteBuf> {

	//在到服务器的连接已经建立之后将被调用
	@Override
	public void channelActive(ChannelHandlerContext ctx) throws Exception {
		//当被通知Channel是活跃的时候，发送一条消息
		ctx.writeAndFlush(Unpooled.copiedBuffer("Netty rocks!",CharsetUtil.UTF_8));
	}
	//当从服务器接收到一条消息时被调用
	@Override
	protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception {
		//记录已接收消息的转储
		System.out.println("Client received: "+msg.toString(CharsetUtil.UTF_8));
	}
	//在处理过程中引发异常时被调用
	@Override
	public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
		//在发生异常时，记录错误并关闭Channel
		cause.printStackTrace();
		ctx.close();
	}
}
如同服务器，客户端将拥有一个用来处理数据的ChannelInboundHandler。在这个场景
下，你将扩展SimpleChannelInboundHandler 类以处理所有必须的任务，这要求重写下面的方法：
	channelActive()——在到服务器的连接已经建立之后将被调用；
	channelRead0()当从服务器接收到一条消息时被调用；
	exceptionCaught()——在处理过程中引发异常时被调用。
注意：
你可能会想：为什么我们在客户端使用的是SimpleChannelInboundHandler，而不是在EchoServerHandler中所使用的ChannelInboundHandlerAdapter呢？这和两个因素的相互作用有关：业务逻辑如何处理消息以及Netty如何管理资源。
在客户端，当channelRead0()方法完成时，你已经有了传入消息，并且已经处理完它了。当该方法返回时，SimpleChannelInboundHandler负责释放指向保存该消息的ByteBuf 的内存引用。在EchoServerHandler 中，你仍然需要将传入消息回送给发送者，而write()操作是异步的，直到channelRead()方法返回后可能仍然没有完成（如代码清单2-1 所示）。为此，EchoServerHandler扩展了ChannelInboundHandlerAdapter，其在这个时间点上不会释放消息。消息在EchoServerHandler 的channelReadComplete()方法中，当writeAndFlush()方法被调用时被释放
2.引导客户端
引导客户端类似于引导服务器，不同的是，客户端是使用主机和端口参数来连接远程地址，
/*
 * Echo客户端 基于引导
 */
public class EchoClient {
	private final String host;
	private final int port;

	public EchoClient(String host, int port) {
		this.host = host;
		this.port = port;
	}

	public static void main(String[] args) throws Exception {
		if (args.length != 2) {
			System.err.println("Usage: " + EchoClient.class.getSimpleName() + " <host> <port>");
			return;
		}
		String host = args[0];
		int port = Integer.parseInt(args[1]);
		new EchoClient(host, port).start();
	}

	public void start() throws InterruptedException {
		//指定EventLoopGroup 以处理客户端事件；需要适用于NIO 的实现
		EventLoopGroup group = new NioEventLoopGroup();
		try {
			//创建Bootstrap
			Bootstrap bootstrap = new Bootstrap();
			bootstrap.group(group)
							  .channel(NioSocketChannel.class)//适用于NIO 传输的Channel 类型
							  .remoteAddress(new InetSocketAddress(host, port))//设置服务器的InetSocketAddress
							  .handler(new ChannelInitializer<SocketChannel>() {
				@Override
				protected void initChannel(SocketChannel ch) throws Exception {
					//在创建Channel 时，向ChannelPipeline中添加一个EchoClientHandler 实例
					ch.pipeline().addLast(new EchoClientHandler());
				}
			});
			//连接到远程节点，阻塞等待直到连接完成
			ChannelFuture f = bootstrap.connect().sync();
			//阻塞，直到Channel 关闭
			f.channel().closeFuture().sync();
		} finally {
			//关闭线程池并且释放所有的资源
			group.shutdownGracefully().sync();
		}
	}

}
和之前一样，使用了NIO 传输。注意，你可以在客户端和服务器上分别使用不同的传输。例如，在服务器端使用NIO 传输，而在客户端使用OIO 传输。
客户端组件的步骤：
为初始化客户端，创建了一个Bootstrap 实例；
  为进行事件处理分配了一个NioEventLoopGroup 实例，其中事件处理包括创建新的连接以及处理入站和出站数据；
为服务器连接创建了一个InetSocketAddress 实例；
当连接被建立时，一个EchoClientHandler 实例会被安装到（该Channel 的）
ChannelPipeline 中；
在一切都设置完成后，调用Bootstrap.connect()方法连接到远程节点；