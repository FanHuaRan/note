个人总结
1.目前的网络通讯IO主要包括
  阻塞同步(叫做IO或BIO,OIO): java.net包，传统Socket
  非阻塞同步(属于NIO)：java.nio包的channel(需要注意的是，Channel可以以阻塞的方式运行，这个时候其是阻塞同步)
  IO多路复用(属于NIO): channel以非阻塞方式搭配Selector使用，是一种特殊的非阻塞同步，Refacor模式
  非阻塞异步(AIO,或者NIO2.0): 基于事件和操作系统底层，使用回调，Proacotr模式
  Netty集中了前三者，虽然Netty号称是异步，不过其异步是在NIO上的封装，不是最新的AIO


案例研究之传输迁移
	一个应用程序开始对传输的学习，这个应用程序只简单地接受连接，向客户端写“Hi!”，然后关闭连接。
	不通过Netty使用OIO 和NIO
		使用OIO
	    public class PlainOioServer {
		public void serve(int port) throws IOException {
			final ServerSocket socket = new ServerSocket(port);
			try {
				for (;;) {
					final Socket clientSocket = socket.accept();
					System.out.println("Accepted connection from " + clientSocket);
					new Thread(new Runnable() {
						@Override
						public void run() {
							OutputStream out;
							try {
								out = clientSocket.getOutputStream();
								out.write("Hi!\r\n".getBytes(Charset.forName("UTF-8")));
								out.flush();
								clientSocket.close();
							} catch (IOException e) {
								e.printStackTrace();
							} finally {
								try {
									clientSocket.close();
								} catch (IOException ex) {
									// ignore on close
								}
							}
						}
					}).start();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		使用NIO
		public class PlainNioServer {
		public void serve(int port) throws IOException {
			ServerSocketChannel serverChannel = ServerSocketChannel.open();
			serverChannel.configureBlocking(false);
			ServerSocket ssocket = serverChannel.socket();
			InetSocketAddress address = new InetSocketAddress(port);
			ssocket.bind(address);
			Selector selector = Selector.open();
			serverChannel.register(selector, SelectionKey.OP_ACCEPT);
			final ByteBuffer msg = ByteBuffer.wrap("Hi!\r\n".getBytes());
			for (;;) {
				try {
					selector.select();
				} catch (IOException ex) {
					ex.printStackTrace();
					// handle exception
					break;
				}
				Set<SelectionKey> readyKeys = selector.selectedKeys();
				Iterator<SelectionKey> iterator = readyKeys.iterator();
				while (iterator.hasNext()) {
					SelectionKey key = iterator.next();
					iterator.remove();
					try {
						if (key.isAcceptable()) {
							ServerSocketChannel server = (ServerSocketChannel) key.channel();
							SocketChannel client = server.accept();
							client.configureBlocking(false);
							client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, msg.duplicate());
							System.out.println("Accepted connection from " + client);
						}
						if (key.isWritable()) {
							SocketChannel client = (SocketChannel) key.channel();
							ByteBuffer buffer = (ByteBuffer) key.attachment();
							while (buffer.hasRemaining()) {
								if (client.write(buffer) == 0) {
									break;
								}
							}
							client.close();
						}
					} catch (IOException ex) {
						key.cancel();
						try {
							key.channel().close();
						} catch (IOException cex) {
							// ignore on close
						}
					}
				}
			}
		}
	通过Netty使用OIO和NIO
	使用Netty 的阻塞网络处理:


	使用Netty 的异步网络处理:


	Netty 为每种传输的实现都暴露了相同的API，所以无论选用哪一种传输的实现，你的代码都仍然几乎不受影响。在所有的情况下，传输的实现都依赖于interface Channel、ChannelPipeline 和ChannelHandler。


传输API
	传输API 的核心是interface Channel，它被用于所有的I/O操作。Channel类的层次结构如图:


	每个Channel 都将会被分配一个ChannelPipeline 和ChannelConfig。ChannelConfig包含了该Channel的所有配置设置，并且支持热更新。由于特定的传输可能具有独特的设置，所以它可能会实现一个ChannelConfig 的子类型。
	Channel是独一无二的，所以为了保证顺序将Channel 声明为java.lang.Comparable 的一个子接口。因此，如果两个不同的Channel实例都返回了相同的散列码，那么AbstractChannel中的compareTo方法的实现将会抛出一个Error。ChannelPipeline 持有所有将应用于入站和出站数据以及事件的ChannelHandler实例，这些ChannelHandler实现了应用程序用于处理状态变化以及数据处理的逻辑。ChannelHandler 的典型用途包括：
	将数据从一种格式转换为另一种格式；
	提供异常的通知；
	提供Channel变为活动的或者非活动的通知；
	提供当Channel注册到EventLoop 或者从EventLoop注销时的通知；
	提供有关用户自定义事件的通知。
	注意：拦截过滤器 ChannelPipeline 实现了一种常见的设计模式—拦截过滤器（InterceptingFilter）。UNIX管道是另外一个熟悉的例子：多个命令被链接在一起，其中一个命令的输出端将连接到命令行中下一个命令的输入端。你也可以根据需要通过添加或者移除ChannelHandler实例来修改ChannelPipeline。
	channel的方法如图所示：


	注意:Netty 的Channel 实现是线程安全的，因此你可以存储一个到Channel的引用，并且每当你需要向远程节点写数据时，都可以使用它，即使当时许多线程都在使用它
Netty内置的传输
	Netty内置了一些可开箱即用的传输。因为并不是它们所有的传输都支持每一种协议，所以你必须选择一个和你的应用程序所使用的协议相容的传输。
	Netty所提供的传输如下：
	NIO     	所属包：o.netty.channel.socket.nio   使用java.nio.channels 包作为基础——基于选择器的方式
	Epoll   	所属包：io.netty.channel.epoll       由JNI驱动的epoll和非阻塞IO。这个传输支持只有在Linux上可用的多种特												   性，如SO_REUSEPORT，比NIO传输更快，而且是完全非阻塞的
	OIO     	所属包：io.netty.channel.socket.oio  使用java.net 包作为基础——使用阻塞流
	Local 		所属包：io.netty.channel.local       可以在VM 内部通过管道进行通信的本地传输
	Embedded 	所属包：io.netty.channel.Embedded     Embedded传输，允许使用ChannelHandler而又不需要一个真正的基于网络的传输。这在测试你的ChannelHandler 实现时非常有用

	NIO——非阻塞I/O
	不多做笔记了，看图：


	Epoll—用于Linux 的本地非阻塞传输
	Netty为Linux提供了一组NIO API，其以一种和它本身的设计更加一致的方式使用epoll，并且以一种更加轻量的方式使用中断。如果你的应用程序旨在运行于Linux系统，那么请考虑利用这个版本的传输；你将发现在高负载下它的性能要优于JDK的NIO实现。
	
	OIO—旧的阻塞I/O
	Netty利用了Socket标志-SO_TIMEOUT，它指定了等待一个I/O操作完成的最大毫秒数。如果操作在指定的时间间隔内没有完成，则将会抛出一个SocketTimeout Exception。Netty将捕获这个异常并继续处理循环。在EventLoop下一次运行时，它将再次尝试。这实际上也是类似于Netty这样的异步框架能够支持OIO的唯一方式

	用于JVM内部通信的Local传输
	Netty提供了一个Local传输，用于在同一个JVM 中运行的客户端和服务器程序之间的异步通信在这个传输中，和服务器Channel相关联的SocketAddress并没有绑定物理网络地址；相反，只要服务器还在运行，它就会被存储在注册表里，并在Channel 关闭时注销。因为这个传输并不接受真正的网络流量，所以它并不能够和其他传输实现进行互操作。因此，客户端希望连接到（在同一个JVM 中）使用了这个传输的服务器端时也必须使用它。除了这个限制，它的使用方式和其他的传输一模一样。如图：

	Embedded传输
	将一组ChannelHandler 作为帮助器类嵌入到其他的ChannelHandler 内部。通过这种方式，你将可以扩展一个ChannelHandler 的功能，而又不需要修改其内部代码。不足为奇的是，Embedded 传输的关键是一个被称为EmbeddedChannel 的具体的Channel实现
	主要也用作测试


传输的用例
	可能会遇到的用例。
	非阻塞代码库——如果你的代码库中没有阻塞调用（或者你能够限制它们的范围），那么在Linux上使用NIO或者epoll始终是个好主意。虽然NIO/epoll旨在处理大量的并发连接，但是在处理较小数目的并发连接时，它也能很好地工作，尤其是考虑到它在连接之
	间共享线程的方式。

阻塞代码库——正如我们已经指出的，如果你的代码库严重地依赖于阻塞I/O，而且你的应
	用程序也有一个相应的设计，那么在你尝试将其直接转换为Netty 的NIO 传输时，你将可
	能会遇到和阻塞操作相关的问题。不要为此而重写你的代码，可以考虑分阶段迁移：先从
	OIO 开始，等你的代码修改好之后，再迁移到NIO（或者使用epoll，如果你在使用Linux）。

	在同一个JVM 内部的通信——在同一个JVM 内部的通信，不需要通过网络暴露服务，是
	Local 传输的完美用例。这将消除所有真实网络操作的开销，同时仍然使用你的Netty 代码
	库。如果随后需要通过网络暴露服务，那么你将只需要把传输改为NIO 或者OIO 即可。

	测试你的ChannelHandler 实现——如果你想要为自己的ChannelHandler 实现编
	写单元测试，那么请考虑使用Embedded 传输。这既便于测试你的代码，而又不需要创建大
	量的模拟（mock）对象。你的类将仍然符合常规的API 事件流，保证该ChannelHandler
	在和真实的传输一起使用时能够正确地工作。
	
	最佳实践
