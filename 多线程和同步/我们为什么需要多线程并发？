我们需要多线程的原因：
	1．多线程开发可以将耗时操作放入子线程，将UI刷新加入主线程，防止页面卡顿。
	   可以看看.net4.5 async/await 这个目的主要是针对GUI开发。
	2．在并发操作时使用多线程，如服务器端并发线程响应用户的请求。
	   可以看看web应用服务器的线程池，典型的BIO，稍有过时。
	3．在多核CPU系统中，使用线程可以提高程序响应速度，提高CPU和内存的利用率。
	   最核心的原因
	4. 线程相比进程的开销更小，也可以更容易的进行通讯和同步
	   好答案
	5. 使用多线程或者select模型可以不让高速的CPU等待低速的IO设备和网络通信上，特别是select模型能从根本
	   上解决这个性能损耗问题
	   可以看看NIO、AIO
	4．改善程序结构。将一个复杂的的进程分为多个线程，减少类之间的耦合。
	   这个目的并不十分明显
	5.将程序分块管理，方便程序的开发和维护。
	   这个目的并不十分明显
	6.可以随时停止任务。可以分别设置各个任务的优先级以优化性能。
	   这个目的也并不明显

关于并发处理目的的一些精辟见解（摘自升入理解JVM虚拟机）
   并发处理的广泛应用是使得Amadahl定律代替摩尔定律成为计算机性能发展源动力的根本原因，也是人类“压榨”计算机运行能力的最有力武器。
    多任务处理在现代计算机操作系统中几乎已经是一项必备功能了。在许多情况下，让计算机同时去做几件事情不仅是因为计算机的运算能力强大了，还有一个很重要的原因是计算机的运算速度与它的存储和通信子系统速度的差距太大。大量的时间都花费在磁盘I/O、网络通信或者数据库访问上。如果不希望处理器在大部分时间里都处于等待其它资源的状态，就必须使用一些手段去把处理器的运算能力了压榨出来，否则就会造成很大的浪费。而让计算机同时处理几项任务则是最容易想到的、也被证明是非常有效的压榨手段。
    除了充分利用计算机处理器的能力外，一个服务端同时对多个客户端提供服务则是另一个更具体的并发应用场景。衡量一个废物性能的好坏，每秒事务处理数（TPS）是最重要的指标之一，它代表着一秒内服务端平均能相应的请求总数，而TPS值与程序的并发能力又有非常密切的关系。对于计算量相同的任务，程序线程并发协调得有条不紊，效率自然就会越高；反之。线程之间频繁阻塞甚至死锁，将会大大降低程序的并发能力。
