一.概论
Go是一门全新的静态类型开发语言，具有自动垃圾回收，丰富的内置类型,函数多返回值，错误处理，匿名函数,并发编程，反射等特性．
虽然Go是一门推崇软件工程理念的编程语言，语言本身就有着标准的工程结构标准，但是关于Go语言工程结构的使用，还是众说纷纭。
主要存在两种说法：
1.一个GOPATH对应于一个项目，这种给人感觉比较标准，不过要求我们每新建一个项目就要往GOPATH环境变量里面加东西
2.一个GOPATH对应于多个项目，这种省去了修改环境变量这一步，不过初学者还是会有些困惑。（go中是没有项目这个概念的，只有包。可执行包只是特殊的一种）
个人的理解是两种说法都合理，只是站在了不同的角度去理解。不管工程怎么放，GOPATH的标准是存在的，先看看GOPATH

二.GOPATH
 go中只有两个路径(环境变量):
	$GOROOT: go的安装路径,官方包路径根据这个设置自动匹配
	$GOPATH: 工作路径(其实不应该用中文翻译解释，直接说GOPATH更合适)
 go命令依赖$GOROOT和$GOPATH，特别是$GOPATH。
 $GOPATH允许多个目录（当有多个目录时，请注意分隔符，多个目录的时候Windows是分号;Linux系统是冒号）
 当有多个$GOPATH时默认将go get获取的包存放在第一个目录下 
 $GOPATH目录约定有三个子目录
    src：存放源代码(比如：.go .c .h .s等)
    pkg：编译后生成的库文件（比如：.a）
    bin：编译后生成的可执行文件（为了方便，可以把此目录加入到 $PATH 变量中，如果有多个gopath，那么使用${GOPATH//://bin:}/bin添加所有的bin目录）
 三个目录中只有src目录需要我们自己建立，src目录就是接下来开发程序的主要目录，所有的源码都是放在这个目录下面，而pkg目录和bin目录通过命令行编译程序时会自动为我们构建

三.第一种用法（多个项目共用一个$GOPATH）
   go中实际上没有项目这个概念，只有包的概念。可执行包只是特殊的一种，类似我们常说的项目。GOPATH可以设置多个，不管是可执行包，还是非可执行包，通通都应该在某个$GOPATH/src下。
   假设我们有一个可执行项目（包）A，一个库项目（包）B，工程可执行项目（包）C，这三个可以放在一个$GOPATH当中,形如：
   GOPATH指定的目录
          src
             可执行项目（包）A
             库项目B
             可执行项目（包）C
          pkg....
          bin....
    不管有多少个项目（包），使用go build命令指定好参数,都不会互相冲突，也是很好管理的
    这种用法建立在go只有包的概念，包里面区分库包和可执行包，而且这种做法有利于install,各种依赖的管理。

四.第二种用法（一个项目使用一个$GOPATH)
   这种做法是我在《Go语言编程》（许世伟版）中所看见的，形如：
    GOPATH指定的目录（工程项目根目录）
          src
             模块1
             模块2
             模块3
          pkg....
          bin....
五.个人意见
   两种用法都有自己的道理，实际上是相通的，在第一种用法中，如果我们的各个项目（包）都是相关的，那我们何尝不可以理解为每个项目（包）都是一个模块，这也就成了第二种用法。
   我们只需要牢记：go没有项目，只有包。可执行包只是特殊的一种。GOPATH可以设置多个，不管是可执行包，还是非可执行包，通通都应该在某个$GOPATH/src下。
   在实际使用当中：
   1.如果只是学习需要，可以把各个不同的包都放在一个$GOPATH，便于学习
   2.如果是项目开发,不管是商业项目或者开源项目，都另建$GOPATH，在其中包含不同的模块，从而可以更好的管理项目和利于版本管理工具的使用

六.参考文章
   1.GOROOT和GOPATH：https://studygolang.com/articles/6955
   2.设置Golang的GOPATH：https://studygolang.com/articles/7202
   3.go语言工程约定，分包和编译：http://lavafree.iteye.com/blog/1683363
   4.《Go语言编程》（许世伟版）1.5节