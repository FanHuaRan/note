一.架构分层
1.操作分层
(1)数据访问层：DAO，也叫作Repository，最底层的业务逻辑，针对要操作的表，一个表+一个PO+一个DAO 基本的增删改查等逻辑
(3)服务层：Service，核心的业务逻辑，调用Utils+DAO+Component，使用PO+DO+DTO三大模型数据，主要完成核心逻辑+事务+缓存+异常处理等等
(3)通用工具层：Utils，工具类，这部分高度可重用，可静态也可非静态，一般无相关的模型数据，不过也可以定义在包内或者内部类形式定义其所需要的Model
(4)组件层：Component,实际上也应该属于Service,不过功能应该是高度独立，所以独立出来（可选）,使用什么模型数据看情况
(5)web层：Controller、Listener、Filter、Servlet等，,调用Services+Utils，完成相关的web相关功能，调用Service方法完成相关的权限控制，权限控制实际上是要在web层和Service层中一起做
(6)对外接口服务层：Rest接口、SOAP等RPC接口,调用Services+Utils，以DTO的形式对外提供接口
(7)视图层：View，可以是MVC渲染的动态页面，也可以是SOA的静态页面，甚至可以是移动端和PC端页面，前者可以直接被DO渲染，后者使用接口层的DTO和DTO转换出来的VO或者PO
2.模型数据
(1)PO(Persistent Object)：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。
(2)DO(Domain Object)：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。
(3)DTO(Data Transfer Object)：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，泛指用于展示层与服务层之间的数据传输对象。
(4)VO(View Object)：视图对象，有时也叫ViewModel(非MVVM中的ViewModel),用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来，比如：MVVM模型中VIEW绑定的模型数据,

注意：(1)PO和DO在一定情况可以不区分
	  (2)VO和PO在一定情况下可以不区分
	  (3)DTO应该针对接口传输要求进行定义，数据尽量扁平化
	  (4)接口服务层和服务层不应该像DAO层一个表一个类，而应该仔细分析业务逻辑，按照业务模型进行划分和定义
	  (5)异常统一处理不一定在Service层，可以使用通用的框架进行处理，

二.异常处理感悟
1.DAO和UtiLs一定不负责处理抛出异常，有异常(检查型或者ORM中的非检查型异常)全部往上抛
2.异常可以放在Service层处理，这儿主要包括两种方式：
  [1]将底层的异常(包括检查型和非检查型)try-catch,返回错误标识
  [2]try-catch,抛出非检查型异常(可以自定义)，由web统一框架进行处理
3.在Web中定义exception handler统一处理异常(拦截器)，返回错误的code和信息标识等
4.整体思路和之前在asp.net webapi中实践的差不多(自定义异常加全局处理)

三.事务处理感悟
1.web层事务：这一般是针对那些安全性要求较高的系统来说的。比例如电子商务网站。粒度小，一般系统用不着这么细
2.service层事务：这是一常见的事务划分，将事务设置在业务逻辑上，只要业务逻辑出错或异常就事务回滚。粒度较小，一般推荐这种方式，一个Service操作可以关联到多个DAO的操作.在service层执行这些DAO操作,DAO操作失败全部回滚,成功全部提交.
3.数据持久层数据务：也就是常说的数据库事务。这种事务在安全性方面要求低。就是给一个简单的增删改之类的操作增加事务操作。粒度大

四.缓存
1.服务端数据缓存在Service层当中做